<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simulador de Caos 3D</title>
    <style>
        body { margin: 0; overflow: hidden; }
        canvas { display: block; }
        #ui {
            position: absolute;
            top: 10px;
            left: 10px;
            color: white;
            font-family: Arial, sans-serif;
            display: none;
        }
        button {
            padding: 10px;
            margin: 5px;
            background: red;
            border: none;
            color: white;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div id="ui">
        <button onclick="spawnBomb('normal')">Bomba Normal</button>
        <button onclick="spawnBomb('nuclear')">Bomba Nuclear</button>
    </div>

    <script type="module">
        import * as THREE from 'https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.module.js';
        import * as CANNON from 'https://cdn.jsdelivr.net/npm/cannon-es@0.20.0/dist/cannon-es.js';

        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        const world = new CANNON.World();
        world.gravity.set(0, -9.8, 0);

        const groundBody = new CANNON.Body({ type: CANNON.Body.STATIC, shape: new CANNON.Plane() });
        groundBody.position.set(0, -1, 0);
        groundBody.quaternion.setFromEuler(-Math.PI / 2, 0, 0);
        world.addBody(groundBody);

        const ground = new THREE.Mesh(new THREE.PlaneGeometry(100, 100), new THREE.MeshStandardMaterial({ color: "gray" }));
        ground.rotation.x = -Math.PI / 2;
        scene.add(ground);

        const light = new THREE.DirectionalLight(0xffffff, 1);
        light.position.set(10, 20, 10);
        scene.add(light);

        let objects = [];
        let heldObject = null;
        let bombs = [];
        let keys = {};
        let speed = 0.2;

        document.addEventListener("keydown", (e) => keys[e.key] = true);
        document.addEventListener("keyup", (e) => keys[e.key] = false);
        document.addEventListener("keydown", (e) => {
            if (e.key === "e") {
                document.getElementById("ui").style.display = 
                    document.getElementById("ui").style.display === "none" ? "block" : "none";
            }
        });

        document.addEventListener("mousedown", pickUpObject);
        document.addEventListener("mouseup", () => heldObject = null);

        window.spawnBomb = function(type) {
            let size = type === "nuclear" ? 2 : 1;
            let color = type === "nuclear" ? "green" : "red";

            const bombBody = new CANNON.Body({
                mass: 5,
                shape: new CANNON.Sphere(size),
                position: new CANNON.Vec3(camera.position.x, camera.position.y - 1, camera.position.z),
            });
            world.addBody(bombBody);

            const bombMesh = new THREE.Mesh(
                new THREE.SphereGeometry(size),
                new THREE.MeshStandardMaterial({ color })
            );
            scene.add(bombMesh);

            bombs.push({ body: bombBody, mesh: bombMesh, type });
            setTimeout(() => explodeBomb(bombBody), 3000);
        };

        function explodeBomb(bombBody) {
            const explosionForce = bombBody.shapes[0].radius * 50;
            world.bodies.forEach(body => {
                if (body !== bombBody) {
                    let distance = bombBody.position.vsub(body.position).length();
                    if (distance < 10) {
                        let force = new CANNON.Vec3().copy(body.position).vsub(bombBody.position);
                        force.normalize();
                        force.scale(explosionForce / distance, force);
                        body.applyImpulse(force, body.position);
                    }
                }
            });
            scene.remove(bombBody.mesh);
            world.removeBody(bombBody);
        }

        function pickUpObject() {
            if (heldObject) return;
            let closest = null;
            let minDist = 5;
            objects.forEach(obj => {
                let dist = camera.position.distanceTo(obj.mesh.position);
                if (dist < minDist) {
                    closest = obj;
                    minDist = dist;
                }
            });
            if (closest) {
                heldObject = closest;
                heldObject.body.type = CANNON.Body.KINEMATIC;
            }
        }

        function movePlayer() {
            let direction = new THREE.Vector3();
            camera.getWorldDirection(direction);
            if (keys["w"]) camera.position.addScaledVector(direction, speed);
            if (keys["s"]) camera.position.addScaledVector(direction, -speed);
            if (keys["a"]) camera.position.x -= speed;
            if (keys["d"]) camera.position.x += speed;
        }

        function animate() {
            requestAnimationFrame(animate);
            world.step(1 / 60);
            movePlayer();

            bombs.forEach(obj => {
                obj.mesh.position.copy(obj.body.position);
                obj.mesh.quaternion.copy(obj.body.quaternion);
            });

            objects.forEach(obj => {
                obj.mesh.position.copy(obj.body.position);
                obj.mesh.quaternion.copy(obj.body.quaternion);
            });

            if (heldObject) {
                let newPos = camera.position.clone().add(camera.getWorldDirection(new THREE.Vector3()).multiplyScalar(2));
                heldObject.body.position.copy(new CANNON.Vec3(newPos.x, newPos.y, newPos.z));
            }

            renderer.render(scene, camera);
        }

        animate();
    </script>
</body>
</html>
